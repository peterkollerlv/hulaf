/* tslint:disable */
//----------------------
// <auto-generated>
//     Generated using the NSwag toolchain v12.0.0.0 (NJsonSchema v9.12.2.0 (Newtonsoft.Json v11.0.0.0)) (http://NSwag.org)
// </auto-generated>
//----------------------
// ReSharper disable InconsistentNaming

import { mergeMap as _observableMergeMap, catchError as _observableCatch } from 'rxjs/operators';
import { Observable, throwError as _observableThrow, of as _observableOf } from 'rxjs';
import { Injectable, Inject, Optional, InjectionToken } from '@angular/core';
import { Http, Headers, ResponseContentType, Response } from '@angular/http';

export const localhost = new InjectionToken<string>('localhost');

@Injectable({
    providedIn: 'root'
})
export class LocationService {
    private http: Http;
    private baseUrl: string;
    protected jsonParseReviver: ((key: string, value: any) => any) | undefined = undefined;

    constructor(@Inject(Http) http: Http, @Optional() @Inject(localhost) baseUrl?: string) {
        this.http = http;
        this.baseUrl = baseUrl ? baseUrl : "/api/v1";
    }

    /**
     * Lists countries
     * @return Country list.
     */
    getCountryList(): Observable<CountryDto[]> {
        let url_ = this.baseUrl + "/get-country-list";
        url_ = url_.replace(/[?&]$/, "");

        let options_ : any = {
            method: "get",
            headers: new Headers({
                "Accept": "application/json"
            })
        };

        return this.http.request(url_, options_).pipe(_observableMergeMap((response_ : any) => {
            return this.processGetCountryList(response_);
        })).pipe(_observableCatch((response_: any) => {
            if (response_ instanceof Response) {
                try {
                    return this.processGetCountryList(<any>response_);
                } catch (e) {
                    return <Observable<CountryDto[]>><any>_observableThrow(e);
                }
            } else
                return <Observable<CountryDto[]>><any>_observableThrow(response_);
        }));
    }

    protected processGetCountryList(response: Response): Observable<CountryDto[]> {
        const status = response.status;

        let _headers: any = response.headers ? response.headers.toJSON() : {};
        let _mappings: { source: any, target: any }[] = [];
        if (status === 200) {
            const _responseText = response.text();
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : jsonParse(_responseText, this.jsonParseReviver);
            if (resultData200 && resultData200.constructor === Array) {
                result200 = [];
                for (let item of resultData200)
                    result200.push(CountryDto.fromJS(item, _mappings));
            }
            return _observableOf(result200);
        } else if (status !== 200 && status !== 204) {
            const _responseText = response.text();
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
        }
        return _observableOf<CountryDto[]>(<any>null);
    }
}

export class CityDto {
    guid?: string;
    name?: string;
    country?: CountryDto;

    init(data?: any, _mappings?: any) {
        if (data) {
            this.guid = data["Guid"];
            this.name = data["Name"];
            this.country = data["Country"] ? CountryDto.fromJS(data["Country"], _mappings) : new CountryDto();
        }
    }

    static fromJS(data: any, _mappings?: any): CityDto {
        data = typeof data === 'object' ? data : {};
        return createInstance<CityDto>(data, _mappings, CityDto);
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["Guid"] = this.guid;
        data["Name"] = this.name;
        data["Country"] = this.country ? this.country.toJSON() : <any>undefined;
        return data; 
    }
}

export class CountryDto {
    guid?: string;
    name?: string;
    dialingCode?: number;

    init(data?: any, _mappings?: any) {
        if (data) {
            this.guid = data["Guid"];
            this.name = data["Name"];
            this.dialingCode = data["DialingCode"];
        }
    }

    static fromJS(data: any, _mappings?: any): CountryDto {
        data = typeof data === 'object' ? data : {};
        return createInstance<CountryDto>(data, _mappings, CountryDto);
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["Guid"] = this.guid;
        data["Name"] = this.name;
        data["DialingCode"] = this.dialingCode;
        return data; 
    }
}

function jsonParse(json: any, reviver?: any) {
    json = JSON.parse(json, reviver);

    var byid: any = {};
    var refs: any = [];
    json = (function recurse(obj: any, prop?: any, parent?: any) {
        if (typeof obj !== 'object' || !obj)
            return obj;
        
        if ("$ref" in obj) {
            let ref = obj.$ref;
            if (ref in byid)
                return byid[ref];
            refs.push([parent, prop, ref]);
            return undefined;
        } else if ("$id" in obj) {
            let id = obj.$id;
            delete obj.$id;
            if ("$values" in obj)
                obj = obj.$values;
            byid[id] = obj;
        }
        
        if (Array.isArray(obj)) {
            obj = obj.map((v, i) => recurse(v, i, obj));
        } else {
            for (var p in obj) {
                if (obj.hasOwnProperty(p) && obj[p] && typeof obj[p] === 'object')
                    obj[p] = recurse(obj[p], p, obj);
            }
        }

        return obj;
    })(json);

    for (let i = 0; i < refs.length; i++) {
        const ref = refs[i];
        ref[0][ref[1]] = byid[ref[2]];
    }

    return json;
}

function createInstance<T>(data: any, mappings: any, type: any): T {
    if (!mappings)
        mappings = [];
    else {
        let mapping = mappings.filter((m: any) => m.source === data);
        if (mapping.length === 1)
            return <T>mapping[0].target;
    }

    let result: any = new type();
    mappings.push({ source: data, target: result });
    result.init(data, mappings);
    return result;
}

export class SwaggerException extends Error {
    message: string;
    status: number; 
    response: string; 
    headers: { [key: string]: any; };
    result: any; 

    constructor(message: string, status: number, response: string, headers: { [key: string]: any; }, result: any) {
        super();

        this.message = message;
        this.status = status;
        this.response = response;
        this.headers = headers;
        this.result = result;
    }

    protected isSwaggerException = true;

    static isSwaggerException(obj: any): obj is SwaggerException {
        return obj.isSwaggerException === true;
    }
}

function throwException(message: string, status: number, response: string, headers: { [key: string]: any; }, result?: any): Observable<any> {
    if(result !== null && result !== undefined)
        return _observableThrow(result);
    else
        return _observableThrow(new SwaggerException(message, status, response, headers, null));
}

function blobToText(blob: any): Observable<string> {
    return new Observable<string>((observer: any) => {
        if (!blob) {
            observer.next("");
            observer.complete();
        } else {
            let reader = new FileReader(); 
            reader.onload = event => { 
                observer.next((<any>event.target).result);
                observer.complete();
            };
            reader.readAsText(blob); 
        }
    });
}