/* tslint:disable */
//----------------------
// <auto-generated>
//     Generated using the NSwag toolchain v12.0.0.0 (NJsonSchema v9.12.2.0 (Newtonsoft.Json v11.0.0.0)) (http://NSwag.org)
// </auto-generated>
//----------------------
// ReSharper disable InconsistentNaming

import { mergeMap as _observableMergeMap, catchError as _observableCatch } from 'rxjs/operators';
import { Observable, throwError as _observableThrow, of as _observableOf } from 'rxjs';
import { Injectable, Inject, Optional, InjectionToken } from '@angular/core';
import { Http, Headers, ResponseContentType, Response } from '@angular/http';

export const localhost = new InjectionToken<string>('localhost');

@Injectable()
export class PersonService {
    private http: Http;
    private baseUrl: string;
    protected jsonParseReviver: ((key: string, value: any) => any) | undefined = undefined;

    constructor(@Inject(Http) http: Http, @Optional() @Inject(localhost) baseUrl?: string) {
        this.http = http;
        this.baseUrl = baseUrl ? baseUrl : "/api/v1";
    }

    /**
     * Gets a missing person by guid.
     * @param personGuid Guid of person
     * @return Returns a missing person
     */
    missingperson(personGuid: string): Observable<MissingPersonDto> {
        let url_ = this.baseUrl + "/missingperson/{personGuid}";
        if (personGuid === undefined || personGuid === null)
            throw new Error("The parameter 'personGuid' must be defined.");
        url_ = url_.replace("{personGuid}", encodeURIComponent("" + personGuid)); 
        url_ = url_.replace(/[?&]$/, "");

        let options_ : any = {
            method: "get",
            headers: new Headers({
                "Accept": "application/json"
            })
        };

        return this.http.request(url_, options_).pipe(_observableMergeMap((response_ : any) => {
            return this.processMissingperson(response_);
        })).pipe(_observableCatch((response_: any) => {
            if (response_ instanceof Response) {
                try {
                    return this.processMissingperson(<any>response_);
                } catch (e) {
                    return <Observable<MissingPersonDto>><any>_observableThrow(e);
                }
            } else
                return <Observable<MissingPersonDto>><any>_observableThrow(response_);
        }));
    }

    protected processMissingperson(response: Response): Observable<MissingPersonDto> {
        const status = response.status;

        let _headers: any = response.headers ? response.headers.toJSON() : {};
        if (status === 200) {
            const _responseText = response.text();
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = resultData200 ? MissingPersonDto.fromJS(resultData200) : new MissingPersonDto();
            return _observableOf(result200);
        } else if (status !== 200 && status !== 204) {
            const _responseText = response.text();
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
        }
        return _observableOf<MissingPersonDto>(<any>null);
    }

    /**
     * Lists missing persons
     * @return Missing person list.
     */
    missingpersonlist(): Observable<MissingPersonDto[]> {
        let url_ = this.baseUrl + "/missingpersonlist";
        url_ = url_.replace(/[?&]$/, "");

        let options_ : any = {
            method: "get",
            headers: new Headers({
                "Accept": "application/json"
            })
        };

        return this.http.request(url_, options_).pipe(_observableMergeMap((response_ : any) => {
            return this.processMissingpersonlist(response_);
        })).pipe(_observableCatch((response_: any) => {
            if (response_ instanceof Response) {
                try {
                    return this.processMissingpersonlist(<any>response_);
                } catch (e) {
                    return <Observable<MissingPersonDto[]>><any>_observableThrow(e);
                }
            } else
                return <Observable<MissingPersonDto[]>><any>_observableThrow(response_);
        }));
    }

    protected processMissingpersonlist(response: Response): Observable<MissingPersonDto[]> {
        const status = response.status;

        let _headers: any = response.headers ? response.headers.toJSON() : {};
        if (status === 200) {
            const _responseText = response.text();
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            if (resultData200 && resultData200.constructor === Array) {
                result200 = [];
                for (let item of resultData200)
                    result200.push(MissingPersonDto.fromJS(item));
            }
            return _observableOf(result200);
        } else if (status !== 200 && status !== 204) {
            const _responseText = response.text();
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
        }
        return _observableOf<MissingPersonDto[]>(<any>null);
    }

    /**
     * A person seeks a missing person
     * @return Get a person by guid
     */
    seekerperson(): Observable<SeekerPersonDto> {
        let url_ = this.baseUrl + "/seekerperson";
        url_ = url_.replace(/[?&]$/, "");

        let options_ : any = {
            method: "get",
            headers: new Headers({
                "Accept": "application/json"
            })
        };

        return this.http.request(url_, options_).pipe(_observableMergeMap((response_ : any) => {
            return this.processSeekerperson(response_);
        })).pipe(_observableCatch((response_: any) => {
            if (response_ instanceof Response) {
                try {
                    return this.processSeekerperson(<any>response_);
                } catch (e) {
                    return <Observable<SeekerPersonDto>><any>_observableThrow(e);
                }
            } else
                return <Observable<SeekerPersonDto>><any>_observableThrow(response_);
        }));
    }

    protected processSeekerperson(response: Response): Observable<SeekerPersonDto> {
        const status = response.status;

        let _headers: any = response.headers ? response.headers.toJSON() : {};
        if (status === 200) {
            const _responseText = response.text();
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = resultData200 ? SeekerPersonDto.fromJS(resultData200) : new SeekerPersonDto();
            return _observableOf(result200);
        } else if (status !== 200 && status !== 204) {
            const _responseText = response.text();
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
        }
        return _observableOf<SeekerPersonDto>(<any>null);
    }
}

export class PersonDto {
    guid!: string;
    characteristics?: any;
    contactInfo?: any;

    protected _discriminator: string;

    constructor() {
        this._discriminator = "PersonDto";
    }

    init(data?: any) {
        if (data) {
            this.guid = data["guid"];
            this.characteristics = data["characteristics"];
            this.contactInfo = data["contactInfo"];
        }
    }

    static fromJS(data: any): PersonDto {
        data = typeof data === 'object' ? data : {};
        if (data["personType"] === "MissingPersonDto") {
            let result = new MissingPersonDto();
            result.init(data);
            return result;
        }
        if (data["personType"] === "SeekerPersonDto") {
            let result = new SeekerPersonDto();
            result.init(data);
            return result;
        }
        let result = new PersonDto();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["personType"] = this._discriminator; 
        data["guid"] = this.guid;
        data["characteristics"] = this.characteristics;
        data["contactInfo"] = this.contactInfo;
        return data; 
    }
}

/** A missing person */
export class MissingPersonDto extends PersonDto {
    lastSeenLocations?: any[];

    constructor() {
        super();
        if (!data) {
            this.lastSeenLocations = [];
        }
        this._discriminator = "MissingPersonDto";
    }

    init(data?: any) {
        super.init(data);
        if (data) {
            if (data["lastSeenLocations"] && data["lastSeenLocations"].constructor === Array) {
                this.lastSeenLocations = [];
                for (let item of data["lastSeenLocations"])
                    this.lastSeenLocations.push(item);
            }
        }
    }

    static fromJS(data: any): MissingPersonDto {
        data = typeof data === 'object' ? data : {};
        let result = new MissingPersonDto();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        if (this.lastSeenLocations && this.lastSeenLocations.constructor === Array) {
            data["lastSeenLocations"] = [];
            for (let item of this.lastSeenLocations)
                data["lastSeenLocations"].push(item);
        }
        super.toJSON(data);
        return data; 
    }
}

/** A person looking form someone missing */
export class SeekerPersonDto extends PersonDto {
    locationsOfSearch?: any[];

    constructor() {
        super();
        if (!data) {
            this.locationsOfSearch = [];
        }
        this._discriminator = "SeekerPersonDto";
    }

    init(data?: any) {
        super.init(data);
        if (data) {
            if (data["locationsOfSearch"] && data["locationsOfSearch"].constructor === Array) {
                this.locationsOfSearch = [];
                for (let item of data["locationsOfSearch"])
                    this.locationsOfSearch.push(item);
            }
        }
    }

    static fromJS(data: any): SeekerPersonDto {
        data = typeof data === 'object' ? data : {};
        let result = new SeekerPersonDto();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        if (this.locationsOfSearch && this.locationsOfSearch.constructor === Array) {
            data["locationsOfSearch"] = [];
            for (let item of this.locationsOfSearch)
                data["locationsOfSearch"].push(item);
        }
        super.toJSON(data);
        return data; 
    }
}

export class CharateristicsDto {
    guid?: string;
    approxHeightMin?: number;
    approxHeightMax?: number;
    hairColor?: any;
    eyeColor?: any;
    approxAgeMin?: number;
    approxAgeMax?: number;
    knownNames?: string[];

    init(data?: any) {
        if (data) {
            this.guid = data["guid"];
            this.approxHeightMin = data["approxHeightMin"];
            this.approxHeightMax = data["approxHeightMax"];
            this.hairColor = data["hairColor"];
            this.eyeColor = data["eyeColor"];
            this.approxAgeMin = data["approxAgeMin"];
            this.approxAgeMax = data["approxAgeMax"];
            if (data["knownNames"] && data["knownNames"].constructor === Array) {
                this.knownNames = [];
                for (let item of data["knownNames"])
                    this.knownNames.push(item);
            }
        }
    }

    static fromJS(data: any): CharateristicsDto {
        data = typeof data === 'object' ? data : {};
        let result = new CharateristicsDto();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["guid"] = this.guid;
        data["approxHeightMin"] = this.approxHeightMin;
        data["approxHeightMax"] = this.approxHeightMax;
        data["hairColor"] = this.hairColor;
        data["eyeColor"] = this.eyeColor;
        data["approxAgeMin"] = this.approxAgeMin;
        data["approxAgeMax"] = this.approxAgeMax;
        if (this.knownNames && this.knownNames.constructor === Array) {
            data["knownNames"] = [];
            for (let item of this.knownNames)
                data["knownNames"].push(item);
        }
        return data; 
    }
}

export enum EyeColorDto {
    Green = "green", 
    Blue = "blue", 
}

export enum HairColorDto {
    Brown = "brown", 
    Blonde = "blonde", 
}

export class ContactInfoDto {
    guid?: string;
    firstName?: string;
    lastName?: string;
    email?: string;

    init(data?: any) {
        if (data) {
            this.guid = data["guid"];
            this.firstName = data["firstName"];
            this.lastName = data["lastName"];
            this.email = data["email"];
        }
    }

    static fromJS(data: any): ContactInfoDto {
        data = typeof data === 'object' ? data : {};
        let result = new ContactInfoDto();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["guid"] = this.guid;
        data["firstName"] = this.firstName;
        data["lastName"] = this.lastName;
        data["email"] = this.email;
        return data; 
    }
}

export class CityDto {
    guid?: string;
    name?: string;
    country?: Country;

    init(data?: any) {
        if (data) {
            this.guid = data["Guid"];
            this.name = data["Name"];
            this.country = data["Country"] ? Country.fromJS(data["Country"]) : new Country();
        }
    }

    static fromJS(data: any): CityDto {
        data = typeof data === 'object' ? data : {};
        let result = new CityDto();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["Guid"] = this.guid;
        data["Name"] = this.name;
        data["Country"] = this.country ? this.country.toJSON() : <any>undefined;
        return data; 
    }
}

export class CoordinatesDto {
    lat?: number;
    lng?: number;

    init(data?: any) {
        if (data) {
            this.lat = data["lat"];
            this.lng = data["lng"];
        }
    }

    static fromJS(data: any): CoordinatesDto {
        data = typeof data === 'object' ? data : {};
        let result = new CoordinatesDto();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["lat"] = this.lat;
        data["lng"] = this.lng;
        return data; 
    }
}

export class CountryDto {
    guid?: string;
    name?: string;
    dialingCode?: number;

    init(data?: any) {
        if (data) {
            this.guid = data["Guid"];
            this.name = data["Name"];
            this.dialingCode = data["DialingCode"];
        }
    }

    static fromJS(data: any): CountryDto {
        data = typeof data === 'object' ? data : {};
        let result = new CountryDto();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["Guid"] = this.guid;
        data["Name"] = this.name;
        data["DialingCode"] = this.dialingCode;
        return data; 
    }
}

export class LocationDto {
    country?: CountryDto;
    city?: CityDto;
    coordinates?: CoordinatesDto;

    init(data?: any) {
        if (data) {
            this.country = data["country"] ? CountryDto.fromJS(data["country"]) : new CountryDto();
            this.city = data["city"] ? CityDto.fromJS(data["city"]) : new CityDto();
            this.coordinates = data["coordinates"] ? CoordinatesDto.fromJS(data["coordinates"]) : new CoordinatesDto();
        }
    }

    static fromJS(data: any): LocationDto {
        data = typeof data === 'object' ? data : {};
        let result = new LocationDto();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["country"] = this.country ? this.country.toJSON() : <any>undefined;
        data["city"] = this.city ? this.city.toJSON() : <any>undefined;
        data["coordinates"] = this.coordinates ? this.coordinates.toJSON() : <any>undefined;
        return data; 
    }
}

export class Country {
    guid?: string;
    name?: string;
    dialingCode?: number;

    init(data?: any) {
        if (data) {
            this.guid = data["Guid"];
            this.name = data["Name"];
            this.dialingCode = data["DialingCode"];
        }
    }

    static fromJS(data: any): Country {
        data = typeof data === 'object' ? data : {};
        let result = new Country();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["Guid"] = this.guid;
        data["Name"] = this.name;
        data["DialingCode"] = this.dialingCode;
        return data; 
    }
}

export class SwaggerException extends Error {
    message: string;
    status: number; 
    response: string; 
    headers: { [key: string]: any; };
    result: any; 

    constructor(message: string, status: number, response: string, headers: { [key: string]: any; }, result: any) {
        super();

        this.message = message;
        this.status = status;
        this.response = response;
        this.headers = headers;
        this.result = result;
    }

    protected isSwaggerException = true;

    static isSwaggerException(obj: any): obj is SwaggerException {
        return obj.isSwaggerException === true;
    }
}

function throwException(message: string, status: number, response: string, headers: { [key: string]: any; }, result?: any): Observable<any> {
    if(result !== null && result !== undefined)
        return _observableThrow(result);
    else
        return _observableThrow(new SwaggerException(message, status, response, headers, null));
}

function blobToText(blob: any): Observable<string> {
    return new Observable<string>((observer: any) => {
        if (!blob) {
            observer.next("");
            observer.complete();
        } else {
            let reader = new FileReader(); 
            reader.onload = event => { 
                observer.next((<any>event.target).result);
                observer.complete();
            };
            reader.readAsText(blob); 
        }
    });
}