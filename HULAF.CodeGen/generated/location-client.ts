/* tslint:disable */
//----------------------
// <auto-generated>
//     Generated using the NSwag toolchain v12.0.0.0 (NJsonSchema v9.12.2.0 (Newtonsoft.Json v11.0.0.0)) (http://NSwag.org)
// </auto-generated>
//----------------------
// ReSharper disable InconsistentNaming

export module LocationModule {
namespace HULAF.Domain.Location {

export class CityDto implements ICityDto {
    guid?: string;
    name?: string;
    country?: CountryDto;

    constructor(data?: ICityDto) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
        if (!data) {
            this.country = new CountryDto();
        }
    }

    init(data?: any) {
        if (data) {
            this.guid = data["Guid"];
            this.name = data["Name"];
            this.country = data["Country"] ? CountryDto.fromJS(data["Country"]) : new CountryDto();
        }
    }

    static fromJS(data: any): CityDto {
        data = typeof data === 'object' ? data : {};
        let result = new CityDto();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["Guid"] = this.guid;
        data["Name"] = this.name;
        data["Country"] = this.country ? this.country.toJSON() : <any>undefined;
        return data; 
    }
}

export interface ICityDto {
    guid?: string;
    name?: string;
    country?: CountryDto;
}

export class CountryDto implements ICountryDto {
    guid?: string;
    name?: string;

    constructor(data?: ICountryDto) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(data?: any) {
        if (data) {
            this.guid = data["Guid"];
            this.name = data["Name"];
        }
    }

    static fromJS(data: any): CountryDto {
        data = typeof data === 'object' ? data : {};
        let result = new CountryDto();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["Guid"] = this.guid;
        data["Name"] = this.name;
        return data; 
    }
}

export interface ICountryDto {
    guid?: string;
    name?: string;
}

}
}